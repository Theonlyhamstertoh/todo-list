(()=>{"use strict";var e={802:(e,t,n)=>{n.d(t,{Z:()=>A});var r=n(15),a=n.n(r),o=n(645),i=n.n(o),s=n(667),c=n.n(s),d=n(678),l=i()(a()),u=c()(d);l.push([e.id,'header{position:fixed;align-items:center;padding:40px 25px;gap:20px;display:flex;flex-direction:column;width:70px;height:100vh;background-color:#222}header .icon{display:flex;flex-direction:row;justify-content:center;align-items:center;width:40px;height:40px;background-color:#555;filter:grayscale(100%)}main{margin-left:70px;width:calc(100vw - 70px);height:100vh;background-color:#333;overflow-y:hidden}*{box-sizing:border-box;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Open Sans","Helvetica Neue",sans-serif;margin:0;padding:0}li{list-style-type:none}.item_due-overdue{border-radius:50px;padding:2px 7px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;height:25px;background-color:#c02525}.item_due-today{border-radius:50px;padding:2px 7px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;height:25px;background-color:#d8b000}.item_due-someday{border-radius:50px;padding:2px 7px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;height:25px;background-color:#71c206}.subtask{padding-left:20px}.button-style1{outline:none;border:none;background-color:transparent;background-color:#3c91c2;color:rgba(255,255,255,.856);border-radius:10px;padding:7px;cursor:pointer}.button-style2{background-color:transparent;outline:none;border:none;background-color:transparent;color:rgba(255,255,255,.856);text-decoration:underline;cursor:pointer}::placeholder{color:rgba(202,202,202,.698)}.disabled{opacity:.4}@media(max-width: 610px){.list-container{padding:0 50px 100px 25px !important}}.popper{position:absolute;right:-40px;top:30px;background-color:#121212;padding:10px}.popper .drop_down_menu{display:flex;justify-content:flex-start;flex-direction:column}.list-container{padding:0px 100px 100px 100px;height:100%;overflow:auto}.list-nav{color:#ffffffc7;padding:40px 0 10px 0;display:flex;flex-direction:row;justify-content:space-between;align-items:center;align-items:center;border-bottom:1px solid rgba(204,204,204,.171)}.list-nav .list-heading{font-size:25px;font-weight:bold}.list-nav .list-sort{padding-right:20px;cursor:pointer}.list-content{padding-top:15px;color:rgba(255,255,255,.856);user-select:none}.list-content .task-heading{font-size:20px;font-weight:bold;padding-bottom:5px;position:relative;cursor:pointer}.list-content .task-heading:hover{color:#e44f4a}.list-content .section-title{pointer-events:none}.list-content .task_list{margin-bottom:30px}.list-content .total_completed_tasks{pointer-events:none}.list-content .show_completed_task_icon{position:absolute;right:3px;transition:.3s all;font-size:30px;transform:rotate(270deg);pointer-events:none}.list-content .show_completed_task_icon:hover{cursor:pointer;font-size:35px}.list-content .show_completed_task_icon:active{font-size:40px}.task_list_item{padding:10px;border-radius:7px;margin:10px 0;background-color:#272727;box-shadow:inset -1px -1px 1px 1px rgba(110,110,110,.287);display:flex;flex-direction:row;justify-content:space-between;align-items:center;position:relative;width:100%;height:45px}.task_list_item .item_check{width:20px;height:20px;border:2px solid rgba(204,204,204,.5);position:absolute;border-radius:50px;transition:.3s all}.task_list_item .item_check:hover{background-color:rgba(168,83,83,.274);cursor:pointer}.task_list_item .item_check:hover .checkmark{display:block}.task_list_item .item_check:active{background-color:rgba(184,43,43,.623);transform:scale(1.15)}.task_list_item .item_check .checkmark{display:none;position:absolute;top:-3px;left:2px;pointer-events:none;transform:scale(0.7)}.task_list_item .item_title{margin-left:25px;font-size:16px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;cursor:pointer}.task_list_item .item_tools{display:flex;flex-direction:row;justify-content:center;align-items:center;gap:2px}.task_list_item .item_tools .item_due{margin-right:7px}.task_list_item .item_tools .edit_icon{width:20px;height:20px;cursor:pointer;transition:.3s all}.task_list_item .item_tools .edit_icon:hover{transform:scale(1.1)}.task_list_item .item_tools .delete_icon{width:20px;height:16px;cursor:pointer;transition:.3s all}.task_list_item .item_tools .delete_icon:hover{transform:scale(1.1)}.plus_add_button{display:flex;flex-direction:row;justify-content:initial;align-items:center;gap:5px;cursor:pointer;padding-bottom:5px;user-select:none;color:rgba(202,202,202,.698)}.plus_add_button:hover{color:rgba(255,255,255,.856)}.plus_add_button:hover .plus-icon{border-radius:50px;background-color:#3c91c2}.plus_add_button .plus-icon{width:20px;height:20px;pointer-events:none}.plus_add_button .add_task{pointer-events:none}.form_top{padding:10px;border-radius:7px;margin:10px 0;background-color:#272727;box-shadow:inset -1px -1px 1px 1px rgba(110,110,110,.287)}.form_title{font-size:16px;color:rgba(255,255,255,.856);width:100%;resize:vertical;border:none;background-color:transparent;height:100%;cursor:text;word-wrap:break-word;outline:none}.form_extra{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.form_extra .form_tools{display:flex;flex-direction:row;justify-content:initial;align-items:center;margin:10px 0;gap:10px}.form_extra .form_tools .form_icon{height:20px;outline:none;border:none;background-color:transparent;background-color:#555;color:rgba(255,255,255,.856)}.date_Wrapper,option,.importance_Wrapper{display:flex;flex-direction:row;justify-content:space-between;align-items:center;font-size:14px;gap:3px;cursor:pointer;border:2px solid rgba(255,255,255,.205);padding:5px;border-radius:10px}.date_Wrapper:hover,option:hover,.importance_Wrapper:hover{background-color:rgba(255,255,255,.105)}.date_Wrapper .date_value,option .date_value,.importance_Wrapper .date_value{pointer-events:none;padding-right:3px}.date_Wrapper .datepicker-toggle,option .datepicker-toggle,.importance_Wrapper .datepicker-toggle{margin-top:4px;display:inline-block;position:relative;width:18px;height:19px}.date_Wrapper .datepicker-toggle-button,option .datepicker-toggle-button,.importance_Wrapper .datepicker-toggle-button{position:absolute;left:0;top:0;width:90%;height:90%;background-image:url('+u+");filter:invert(51%) sepia(72%) saturate(2463%) hue-rotate(159deg) brightness(91%) contrast(101%)}.date_Wrapper .datepicker-input,option .datepicker-input,.importance_Wrapper .datepicker-input{position:absolute;left:-6px;top:-12px;width:89px;height:38px;opacity:0;cursor:pointer;box-sizing:border-box}.date_Wrapper .datepicker-input::-webkit-calendar-picker-indicator,option .datepicker-input::-webkit-calendar-picker-indicator,.importance_Wrapper .datepicker-input::-webkit-calendar-picker-indicator{position:absolute;left:0;top:0;width:100%;height:100%;margin:0;padding:0;cursor:pointer}.importance_Wrapper{background-color:transparent;outline:none;color:rgba(255,255,255,.856)}option{background-color:#292929}","",{version:3,sources:["webpack://./_header.scss","webpack://./_mixin.scss","webpack://./_var.scss","webpack://./_main.scss","webpack://./_base.scss","webpack://./_utility.scss","webpack://./_mediaqueries.scss","webpack://./_tooltips.scss","webpack://./_list.scss","webpack://./_form.scss","webpack://./style.scss"],names:[],mappings:"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",sourcesContent:['@use "var";\r\n@use "mixin";\r\n\r\nheader {\r\n    position: fixed;\r\n    align-items: center;\r\n    padding: 40px 25px;\r\n    gap: 20px;\r\n    @include mixin.flex-column;\r\n    width: var.$heading-width;\r\n    height: 100vh;\r\n    background-color: var.$heading-color;\r\n\r\n    .icon {\r\n        @include mixin.flex-center(row, center);\r\n        width: 40px;\r\n        height: 40px;\r\n        background-color: #555;\r\n        filter: grayscale(100%);\r\n    }\r\n}','@use "var";\r\n@mixin flex-center($flex-direction, $flex-content){\r\n    display: flex;\r\n    flex-direction: $flex-direction;\r\n    justify-content: $flex-content;\r\n    align-items: center;\r\n}\r\n@mixin flex-column {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n@mixin big-title {\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n}\r\n\r\n@mixin med-title {\r\n    font-size: var.$title-size;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\n@mixin task_list_item {\r\n    padding: 10px;\r\n    border-radius: 7px;\r\n\r\n    margin: 10px 0;\r\n    background-color: var.$task-backgroundColor;\r\n    box-shadow: inset -1px -1px 1px 1px rgba(110, 110, 110, 0.287)\r\n}\r\n\r\n\r\n@mixin remove_border-outline {\r\n    outline: none;\r\n    border: none;\r\n    background-color: transparent;\r\n}\r\n\r\n@mixin date-padding {\r\n    border-radius: 50px;\r\n    padding: 2px 7px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    height: 25px;\r\n}\r\n',"//dark theme mode\r\n\r\n// Color -----------------\x3e       \r\n\r\n//base\r\n$heading-color: #222222;\r\n$main-color: #333333;\r\n\r\n// list\r\n$listHeading-color: #ffffffc7;\r\n$borderbottom-color: 1px solid rgba(204, 204, 204, 0.171);  \r\n\r\n//task\r\n$taskTitle-color: rgba(255, 255, 255, 0.856);\r\n$task-backgroundColor: rgb(39, 39, 39);\r\n\r\n//due date \r\n$task-dateColor1: rgb(192, 37, 37);\r\n$task-dateColor2: rgb(216, 176, 0);\r\n$task-dateColor3: rgb(113, 194, 6);\r\n\r\n//add task \r\n$plusIcon-color: rgb(60, 145, 194);  \r\n// edit button \r\n$buttonText-color: rgba(255, 255, 255, 0.856);\r\n$placeholder-color: rgba(202, 202, 202, 0.698);\r\n\r\n// date\r\n$dateBorder-color: rgba(255, 255, 255, 0.205);\r\n$datebackground-color: rgba(255, 255, 255, 0.105);\r\n//size \r\n$title-size: 20px;\r\n$normal-size: 16px;\r\n$date-size: 14px;\r\n\r\n// sizing ----------------\x3e\r\n$heading-width: 70px; ",'@use "var";\r\n@use "mixin";\r\n\r\n\r\nmain {\r\n    margin-left: var.$heading-width;\r\n    width: calc(100vw - #{var.$heading-width});\r\n    height: 100vh;\r\n    background-color: var.$main-color;\r\n    overflow-y: hidden;\r\n\r\n \r\n}\r\n',"* {\r\n    box-sizing: border-box;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nli {\r\n    list-style-type: none;\r\n}",'// Utility classes that give generally common styling and can be used in many places\r\n\r\n@use "var";\r\n@use "mixin";\r\n\r\n.item_due-overdue {\r\n    @include mixin.date-padding;\r\n    background-color: var.$task-dateColor1;\r\n\r\n}\r\n\r\n.item_due-today {\r\n    @include mixin.date-padding;\r\n    background-color: var.$task-dateColor2;\r\n\r\n\r\n}\r\n\r\n.item_due-someday {\r\n    @include mixin.date-padding;\r\n    background-color: var.$task-dateColor3;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.subtask {\r\n    padding-left: 20px;\r\n}\r\n.button-style1 {\r\n    @include mixin.remove_border-outline;\r\n    background-color: rgb(60, 145, 194);\r\n    color: var.$buttonText-color;\r\n\r\n    border-radius: 10px;\r\n    padding: 7px;\r\n    cursor: pointer;\r\n\r\n}\r\n\r\n.button-style2 {\r\n    background-color: transparent;\r\n    @include mixin.remove_border-outline;\r\n    color: var.$buttonText-color;\r\n    text-decoration: underline;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n::placeholder {\r\n    color: var.$placeholder-color;\r\n}\r\n\r\n.disabled {\r\n    opacity: 0.4;\r\n}',"\r\n@media (max-width: 610px) {\r\n    .list-container {\r\n        padding: 0 50px 100px 25px !important;\r\n    }\r\n}",'@use "var";\r\n@use "mixin";\r\n\r\n\r\n.popper  {\r\n    position: absolute;\r\n    right: -40px;\r\n    top: 30px;\r\n    // visibility: hidden;\r\n    background-color: #121212;\r\n    padding: 10px;\r\n    .drop_down_menu {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        flex-direction:  column;\r\n\r\n\r\n        \r\n        \r\n    }\r\n}','@use "var";\r\n@use "mixin";\r\n\r\n.list-container {\r\n    padding: 0px 100px 100px 100px;\r\n    height: 100%;\r\n    overflow: auto;\r\n}\r\n\r\n.list-nav {\r\n    color: var.$listHeading-color;\r\n    padding: 40px 0 10px 0;\r\n    @include mixin.flex-center(row, space-between);\r\n    align-items: center;\r\n    border-bottom: var.$borderbottom-color;\r\n\r\n    .list-heading {\r\n        @include mixin.big-title;\r\n    }\r\n    .list-sort {\r\n        padding-right: 20px;\r\n        cursor: pointer;\r\n    }\r\n}\r\n\r\n\r\n.list-content {\r\n    padding-top: 15px;\r\n    color: var.$taskTitle-color;\r\n    user-select: none;\r\n    .task-heading {\r\n        @include mixin.med-title;\r\n        padding-bottom: 5px;\r\n        position: relative;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            color: #e44f4a;\r\n        }\r\n    }\r\n\r\n    .section-title {\r\n        pointer-events: none;\r\n    }\r\n\r\n    .task_list {\r\n        margin-bottom: 30px;\r\n    }\r\n    .total_completed_tasks {\r\n        pointer-events: none;\r\n    }\r\n    .show_completed_task_icon {\r\n        position: absolute;\r\n        right: 3px;\r\n        transition: .3s all;\r\n        font-size: 30px;\r\n        transform: rotate(270deg);\r\n        pointer-events: none;\r\n        &:hover {\r\n            cursor: pointer;\r\n            font-size: 35px;\r\n        }\r\n\r\n        &:active {\r\n            font-size: 40px;\r\n\r\n        }\r\n\r\n    }\r\n}  \r\n\r\n.task_list_item {\r\n    @include mixin.task_list_item;\r\n    @include mixin.flex-center(row, space-between);\r\n    position: relative;\r\n    width: 100%;\r\n    height: 45px;\r\n    .item_check {\r\n        width: 20px;\r\n        height: 20px;\r\n        border: 2px solid rgba(204, 204, 204, 0.5);\r\n        position: absolute;\r\n        border-radius: 50px;\r\n        transition: .3s all;\r\n        &:hover {\r\n            background-color: rgba(168, 83, 83, 0.274) ;\r\n            cursor: pointer;\r\n\r\n            .checkmark {\r\n                display: block;\r\n            }\r\n        }\r\n        &:active {\r\n            background-color: rgba(184, 43, 43, 0.623);\r\n            transform: scale(1.15);\r\n        }\r\n\r\n        .checkmark {\r\n            display: none;\r\n            position: absolute;\r\n            top: -3px;\r\n            left: 2px;\r\n            pointer-events: none;\r\n            transform: scale(.7);\r\n\r\n        }\r\n    }\r\n    .item_title {\r\n        margin-left: 25px;\r\n        font-size: var.$normal-size;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        cursor: pointer;\r\n\r\n\r\n    }\r\n    .item_tools {\r\n        @include mixin.flex-center(row, center);\r\n        gap: 2px;\r\n\r\n        .item_due {\r\n            margin-right: 7px;\r\n        }\r\n        .edit_icon {\r\n            width: 20px;\r\n            height: 20px;\r\n            cursor: pointer;\r\n            transition: .3s all;\r\n            &:hover {\r\n                transform: scale(1.1)\r\n            }\r\n        }\r\n\r\n        \r\n        .delete_icon {\r\n            width: 20px;\r\n            height: 16px;\r\n            cursor: pointer;\r\n            transition: .3s all;\r\n            &:hover {\r\n                transform: scale(1.1)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.plus_add_button {\r\n    @include mixin.flex-center(row, initial);\r\n    gap: 5px;\r\n    cursor: pointer;\r\n    padding-bottom: 5px;\r\n    user-select: none;\r\n    color: var.$placeholder-color;\r\n    &:hover {\r\n        color: var.$buttonText-color;\r\n        .plus-icon {\r\n            border-radius: 50px;\r\n            background-color: var.$plusIcon-color;\r\n        }\r\n    }\r\n    .plus-icon {\r\n        width: 20px;\r\n        height: 20px;\r\n        pointer-events: none\r\n    }\r\n    .add_task {\r\n        pointer-events: none\r\n    }\r\n}\r\n\r\n','@use "var";\r\n@use "mixin";\r\n\r\n.form_top {\r\n    @include mixin.task_list_item;\r\n}\r\n\r\n.form_title {\r\n    // @include mixin.remove_border-outline;\r\n    font-size: var.$normal-size;\r\n    color: var.$taskTitle-color;\r\n    width: 100%;\r\n    resize: vertical;\r\n    border: none;\r\n    background-color: transparent;\r\n    height: 100%;\r\n    cursor: text;\r\n    word-wrap: break-word;\r\n    outline: none;\r\n}\r\n\r\n.form_extra {\r\n    @include mixin.flex-center(row, space-between);\r\n    .form_tools {\r\n        @include mixin.flex-center(row, initial);\r\n        margin: 10px 0;\r\n        gap: 10px;\r\n    \r\n        .form_icon {\r\n            height: 20px;\r\n            @include mixin.remove_border-outline;\r\n            background-color: #555;\r\n            color: var.$taskTitle-color\r\n        }\r\n    }\r\n}\r\n','@use "header";\r\n@use "sidebar";\r\n@use "main";\r\n@use "base";\r\n@use "utility";\r\n@use "mediaqueries";\r\n@use "var";\r\n@use "mixin";\r\n@use "tooltips";\r\n@use "list";\r\n@use "form";\r\n// @use "date";\r\n\r\n\r\n.date_Wrapper {\r\n    @include mixin.flex-center(row, space-between);\r\n    font-size: var.$date-size;\r\n    gap: 3px;\r\n    cursor: pointer;\r\n    border: 2px solid var.$dateBorder-color;\r\n    padding: 5px;\r\n    border-radius: 10px;\r\n\r\n    &:hover {\r\n        background-color: var.$datebackground-color;\r\n    }\r\n\r\n    .date_value {\r\n        pointer-events: none;\r\n        padding-right: 3px;\r\n    }\r\n\r\n    .datepicker-toggle {\r\n        margin-top: 4px;\r\n        display: inline-block;\r\n        position: relative;\r\n        width: 18px;\r\n        height: 19px;\r\n    }\r\n\r\n    .datepicker-toggle-button {\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        width: 90%;\r\n        height: 90%;\r\n        background-image: url(\'../images/calendar.svg\');\r\n        filter: invert(51%) sepia(72%) saturate(2463%) hue-rotate(159deg) brightness(91%) contrast(101%);\r\n      }\r\n    \r\n      .datepicker-input {\r\n        position: absolute;\r\n        left: -6px;\r\n        top: -12px;\r\n        width: 89px;\r\n        height: 38px;\r\n        opacity: 0;\r\n        cursor: pointer;\r\n        box-sizing: border-box;\r\n      }\r\n      .datepicker-input::-webkit-calendar-picker-indicator {\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        margin: 0;\r\n        padding: 0;\r\n        cursor: pointer;\r\n      }\r\n\r\n}\r\n\r\n.importance_Wrapper {\r\n    @extend .date_Wrapper;\r\n    background-color: transparent;\r\n    outline: none;\r\n    color: var.$taskTitle-color;\r\n}\r\n\r\noption {\r\n    @extend .date_Wrapper;\r\n    background-color: #292929;\r\n\r\n}\r\n'],sourceRoot:""}]);const A=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([d]).join("\n")}return[o].join("\n")}},667:e=>{e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},379:(e,t,n)=>{var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function i(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],a=0;a<e.length;a++){var s=e[a],c=t.base?s[0]+t.base:s[0],d=n[c]||0,l="".concat(c," ").concat(d);n[c]=d+1;var u=i(l),A={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(o[u].references++,o[u].updater(A)):o.push({identifier:l,updater:m(A,t),references:1}),r.push(l)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var d,l=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function u(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function A(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,g=0;function m(e,t){var n,r,a;if(t.singleton){var o=g++;n=p||(p=c(t)),r=u.bind(null,n,o,!1),a=u.bind(null,n,o,!0)}else n=c(t),r=A.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=i(n[r]);o[a].references--}for(var c=s(e,t),d=0;d<n.length;d++){var l=i(n[d]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}n=c}}}},678:(e,t,n)=>{e.exports=n.p+"5d30e3a984bd47c650ed.svg"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),r=n(802);function a(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){a(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(e){a(1,arguments);var t=o(e);return t.setHours(0,0,0,0),t}function s(e,t){a(2,arguments);var n=i(e),r=i(t);return n.getTime()===r.getTime()}function c(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function d(e,t){a(1,arguments);var n=t||{},r=n.locale,i=r&&r.options&&r.options.weekStartsOn,s=null==i?0:c(i),d=null==n.weekStartsOn?s:c(n.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=o(e),u=l.getDay(),A=(u<d?7:0)+u-d;return l.setDate(l.getDate()-A),l.setHours(0,0,0,0),l}function l(e,t,n){a(2,arguments);var r=d(e,n),o=d(t,n);return r.getTime()===o.getTime()}function u(e){a(1,arguments);var t=o(e);return!isNaN(t)}t()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var A={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function p(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var g,m={date:p({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:p({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:p({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},h={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function C(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function f(e){return function(t,n){var r=String(t),a=n||{},o=a.width,i=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],s=r.match(i);if(!s)return null;var c,d=s[0],l=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(l),c=e.valueCallback?e.valueCallback(c):c,{value:c=a.valueCallback?a.valueCallback(c):c,rest:r.slice(d.length)}}}const b={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof A[e]?A[e]:1===t?A[e].one:A[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:m,formatRelative:function(e,t,n,r){return h[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:C({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:C({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:C({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:C({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:C({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(g={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},a=n.match(g.matchPattern);if(!a)return null;var o=a[0],i=n.match(g.parsePattern);if(!i)return null;var s=g.valueCallback?g.valueCallback(i[0]):i[0];return{value:s=r.valueCallback?r.valueCallback(s):s,rest:n.slice(o.length)}}),era:f({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:f({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:f({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:f({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:f({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function v(e,t){a(2,arguments);var n=o(e).getTime(),r=c(t);return new Date(n+r)}function w(e,t){a(2,arguments);var n=c(t);return v(e,-n)}function x(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const y=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return x("yy"===t?r%100:r,t.length)},k=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):x(n+1,2)},B=function(e,t){return x(e.getUTCDate(),t.length)},_=function(e,t){return x(e.getUTCHours()%12||12,t.length)},T=function(e,t){return x(e.getUTCHours(),t.length)},M=function(e,t){return x(e.getUTCMinutes(),t.length)},S=function(e,t){return x(e.getUTCSeconds(),t.length)},I=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return x(Math.floor(r*Math.pow(10,n-3)),t.length)};var E=864e5;function D(e){a(1,arguments);var t=1,n=o(e),r=n.getUTCDay(),i=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function W(e){a(1,arguments);var t=o(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var i=D(r),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var c=D(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=c.getTime()?n:n-1}function U(e){a(1,arguments);var t=W(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=D(n);return r}var P=6048e5;function O(e,t){a(1,arguments);var n=t||{},r=n.locale,i=r&&r.options&&r.options.weekStartsOn,s=null==i?0:c(i),d=null==n.weekStartsOn?s:c(n.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=o(e),u=l.getUTCDay(),A=(u<d?7:0)+u-d;return l.setUTCDate(l.getUTCDate()-A),l.setUTCHours(0,0,0,0),l}function N(e,t){a(1,arguments);var n=o(e,t),r=n.getUTCFullYear(),i=t||{},s=i.locale,d=s&&s.options&&s.options.firstWeekContainsDate,l=null==d?1:c(d),u=null==i.firstWeekContainsDate?l:c(i.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(r+1,0,u),A.setUTCHours(0,0,0,0);var p=O(A,t),g=new Date(0);g.setUTCFullYear(r,0,u),g.setUTCHours(0,0,0,0);var m=O(g,t);return n.getTime()>=p.getTime()?r+1:n.getTime()>=m.getTime()?r:r-1}function Y(e,t){a(1,arguments);var n=t||{},r=n.locale,o=r&&r.options&&r.options.firstWeekContainsDate,i=null==o?1:c(o),s=null==n.firstWeekContainsDate?i:c(n.firstWeekContainsDate),d=N(e,t),l=new Date(0);l.setUTCFullYear(d,0,s),l.setUTCHours(0,0,0,0);var u=O(l,t);return u}var q=6048e5;function $(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+x(o,2)}function z(e,t){return e%60==0?(e>0?"-":"+")+x(Math.abs(e)/60,2):j(e,t)}function j(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+x(Math.floor(a/60),2)+n+x(a%60,2)}const F={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return y(e,t)},Y:function(e,t,n,r){var a=N(e,r),o=a>0?a:1-a;return"YY"===t?x(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):x(o,t.length)},R:function(e,t){return x(W(e),t.length)},u:function(e,t){return x(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return x(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return x(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return k(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return x(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var i=function(e,t){a(1,arguments);var n=o(e),r=O(n,t).getTime()-Y(n,t).getTime();return Math.round(r/q)+1}(e,r);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):x(i,t.length)},I:function(e,t,n){var r=function(e){a(1,arguments);var t=o(e),n=D(t).getTime()-U(t).getTime();return Math.round(n/P)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):x(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):B(e,t)},D:function(e,t,n){var r=function(e){a(1,arguments);var t=o(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),i=n-r;return Math.floor(i/E)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):x(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return x(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return x(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return x(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return _(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):T(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):M(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):S(e,t)},S:function(e,t){return I(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return z(a);case"XXXX":case"XX":return j(a);case"XXXXX":case"XXX":default:return j(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return z(a);case"xxxx":case"xx":return j(a);case"xxxxx":case"xxx":default:return j(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+$(a,":");case"OOOO":default:return"GMT"+j(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+$(a,":");case"zzzz":default:return"GMT"+j(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return x(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return x((r._originalDate||e).getTime(),t.length)}};function R(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function L(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const H={p:L,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return R(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",R(a,t)).replace("{{time}}",L(o,t))}};function Q(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var J=["D","DD"],G=["YY","YYYY"];function X(e){return-1!==J.indexOf(e)}function K(e){return-1!==G.indexOf(e)}function Z(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var V=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ee=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,te=/^'([^]*?)'?$/,ne=/''/g,re=/[a-zA-Z]/;function ae(e,t,n){a(2,arguments);var r=String(t),i=n||{},s=i.locale||b,d=s.options&&s.options.firstWeekContainsDate,l=null==d?1:c(d),A=null==i.firstWeekContainsDate?l:c(i.firstWeekContainsDate);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=s.options&&s.options.weekStartsOn,g=null==p?0:c(p),m=null==i.weekStartsOn?g:c(i.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var h=o(e);if(!u(h))throw new RangeError("Invalid time value");var C=Q(h),f=w(h,C),v={firstWeekContainsDate:A,weekStartsOn:m,locale:s,_originalDate:h},x=r.match(ee).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,H[t])(e,s.formatLong,v):e})).join("").match(V).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return oe(n);var a=F[r];if(a)return!i.useAdditionalWeekYearTokens&&K(n)&&Z(n,t,e),!i.useAdditionalDayOfYearTokens&&X(n)&&Z(n,t,e),a(f,n,s.localize,v);if(r.match(re))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return x}function oe(e){return e.match(te)[1].replace(ne,"'")}function ie(e,t){a(2,arguments);var n=o(e),r=o(t);return n.getFullYear()===r.getFullYear()}function se(e,t){a(2,arguments);var n=o(e),r=o(t);return n.getFullYear()-r.getFullYear()}function ce(e,t){a(2,arguments);var n=o(e),r=o(t),i=n.getTime()-r.getTime();return i<0?-1:i>0?1:i}const de=[],le=(e,t)=>{const n=new class{constructor(e,t){this.id=(new Date).getTime(),this.title=e,this.dueDate=t,this.completed=!1}set completed(e){this._completed=e}getId(){return this.id}get completed(){return this.completed}set theTitle(e){this._title=e}get theTitle(){return this.title}set date(e){this.dueDate=e}get date(){return this.dueDate}}(e,t);de.push(n),ue(n.id,n.title,n.date)},ue=(e,t,n)=>{const r=ve.get_Info().newForm,a=ve.get_Info().dateSection,o=document.createElement("li");o.dataset.id=e,o.classList.add("task_list_item");const i=document.createRange().createContextualFragment(he(t,n));o.appendChild(i),a.insertBefore(o,r)},Ae=e=>{const t=e.target.parentNode.parentNode,n=parseInt(t.dataset.id);let r=null;return de.map((e=>{if(e.id===n)return r=e})),pe.map((e=>{if(e.id===n)return r=e})),r},pe=[],ge=(e,t)=>{const n=e.target.parentNode.childNodes[3];!0===t?n.style.display="none":!1===t&&(n.style.display="block")},me=e=>{if(""===e||"No Date"===e)return"";const t=e.split("-"),n=Number(t[0]),r=Number(t[1])-1,i=Number(t[2]),c=new Date(n,r,i),d=new Date;return function(e){return a(1,arguments),s(e,Date.now())}(c)?"Today":function(e,t){return a(1,arguments),l(e,Date.now(),t)}(c,{weekStartsOn:1})?ae(new Date(n,r,i),"EEEE"):function(e){return a(1,arguments),ie(e,Date.now())}(c)?ae(new Date(n,r,i),"MMMM do"):function(e,t){a(2,arguments);var n=o(e),r=o(t),i=ce(n,r),s=Math.abs(se(n,r));n.setFullYear("1584"),r.setFullYear("1584");var c=ce(n,r)===-i,d=i*(s-c);return 0===d?0:d}(c,d)>=1?ae(new Date(n,r,i),"MMMM do yyyy"):void 0};window.addEventListener("load",(e=>{new Date;const t=document.querySelector('[data-date="today"]');console.log(t),de.forEach((e=>{console.log(e)(me(e.date))}))}));const he=(e,t)=>`\n      <div class='item_check'><span class='checkmark'>&#10003;</span></div>\n      <div class='item_title'>${e}</div>\n          <div class='item_tools'>\n          <div class='item_due'>${me(t)}</div>\n          <img class='edit_icon' src='/src/images/task_edit_icon.svg'>\n          <img class='delete_icon' src='/src/images/trash.svg'>\n\n\n      </div>`,Ce=(()=>{let e=null;const t=t=>e=!0===t,n=()=>{const e=document.querySelector(".form_title"),t=document.querySelector(".datepicker-input"),n=document.querySelector(".date_value");le(e.value,t.value),e.value="",e.focus(),fe.disable(),t.value="",n.textContent="Calendar"},r=()=>{ve.get_Info().form_add_button.removeEventListener("click",n),ve.get_Info().form_cancel_button.removeEventListener("click",r),window.removeEventListener("keydown",be),t(!1),ve.get_Info().newForm.remove()};return{create:(e,a,o,i)=>{const s=document.createElement("li");s.classList.add("form_wrapper");const c=document.createRange().createContextualFragment("\n<div class=\"form_top\">\n<div class='form_input'>\n  <input type='text' class='form_title' placeholder=\"e.g. buy toothpaste\">\n</div>\n<div class='form_extra'>\n  <div class='form_tools'>\n    <div class='date_Wrapper'>\n      <span class=\"datepicker-toggle\">\n        <span class=\"datepicker-toggle-button\"></span>\n        <input type=\"date\" class=\"datepicker-input\">\n      </span>\n      <div class='date_value'>Calendar</div>\n    </div>\n  </div>\n</div>\n</div>\n\n\n\n<div class='form_bottom'>\n<input type=\"button\" data-key='Enter' id='form_add_button' class='button-style1' value='Add Task'>\n<input type=\"button\" data-key='Escape id='form_cancel_button' class='button-style2' value='Cancel'>\n</div>");s.appendChild(c),e.appendChild(s);const d=s.querySelector(".form_title"),l=(s.querySelector(".date_Wrapper"),s.lastChild.childNodes[1]),u=s.lastChild.childNodes[3];t(!0);const A=document.querySelector(".datepicker-input"),p=document.querySelector(".date_value");A.addEventListener("input",(()=>{const e=document.querySelector(".date_value"),t=document.querySelector(".datepicker-input");e.textContent=me(t.value),d.focus()})),ve.store_Info(e,l,u,s,d,A,p),fe.disable(),d.focus(),window.addEventListener("keydown",be),!0===a?(console.log(i),fe.enable(),d.value=i.theTitle,""!==i.date&&(p.textContent=me(i.date),A.value=i.date),o.insertAdjacentElement("afterend",s),d.focus(),u.addEventListener("click",(()=>{r(),le(d.value,A.value)}))):u.addEventListener("click",(()=>{r(),fe.create(ve.get_Info().dateSection)})),l.addEventListener("click",n),d.addEventListener("input",(()=>{d.value.length>0?fe.enable():fe.disable()}))},updateIsFormEnabled:t,getIsFormEnabled:()=>e,remove:r,addTaskButtonHandler:n}})(),fe={remove:e=>{e.remove()},create:e=>{const t=document.createElement("li");t.classList.add("plus_add_button");const n=document.createRange().createContextualFragment("\n    <img class='plus-icon' src='/src/images/plus.svg'>\n    <div class='item_title add_task'>Add task</div>\n");t.appendChild(n),e.appendChild(t)},disable:()=>{ve.get_Info().form_add_button.classList.add("disabled"),ve.get_Info().form_add_button.disabled=!0},enable:()=>{ve.get_Info().form_add_button.classList.remove("disabled"),ve.get_Info().form_add_button.disabled=!1}},be=e=>{const t=document.querySelector(".form_title");document.querySelector(".datepicker-input"),"Escape"===e.key?(Ce.remove(),fe.create(ve.get_Info().dateSection)):"Enter"===e.key&&t.value.length>0&&Ce.addTaskButtonHandler()},ve=(()=>{let e={};return{store_Info:(t,n,r,a,o,i,s)=>(e={dateSection:t,form_add_button:n,form_cancel_button:r,newForm:a,task_title:o,task_dueDate:i,date_value:s},e),get_Info:()=>e}})();window.addEventListener("click",(e=>{if(e.target.classList.contains("plus_add_button")&&(!0===Ce.getIsFormEnabled()&&(Ce.remove(),fe.create(ve.get_Info().dateSection)),Ce.create(e.target.parentNode),fe.remove(e.target)),e.target.classList.contains("delete_icon")&&(e=>{const t=Ae(e);de.splice(de.indexOf(t),1),pe.splice(pe.indexOf(t),1),e.target.parentNode.parentNode.remove(),document.querySelector(".total_completed_tasks").textContent=`(${pe.length})`})(e),e.target.classList.contains("edit_icon")){const t=Ae(e),n=e.target.parentNode.parentNode,r=e.target.parentNode.parentNode.parentNode;!0===Ce.getIsFormEnabled()&&Ce.remove(),Ce.create(r,!0,n,t),n.remove()}if(e.target.classList.contains("task-heading")){const t=e.target.querySelector(".show_completed_task_icon");"rotate(90deg)"===t.style.transform?(t.style.transform="rotate(270deg)",t.style.right="3px",ge(e,!1)):(t.style.transform="rotate(90deg)",t.style.right="-5px",ge(e,!0))}if(e.target.classList.contains("item_check")){if("block"===e.target.childNodes[0].style.display)return e.target.style.backgroundColor="",e.target.childNodes[0].style.display="none",void(e.target.nextElementSibling.style.textDecoration="none");e.target.style.backgroundColor="rgba(168, 83, 83, 0.5)",e.target.childNodes[0].style.display="block",e.target.nextElementSibling.style.textDecoration="line-through",(e=>{const t=document.querySelector('[data-date-list="completed"]'),n=document.querySelector(".total_completed_tasks"),r=e.target.parentNode;de.forEach((t=>{t.id===Number(e.target.parentNode.dataset.id)&&(pe.push(t),t.completed=!0,de.splice(de.indexOf(t),1))})),n.textContent=`(${pe.length})`,t.appendChild(r)})(e)}}),!1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,